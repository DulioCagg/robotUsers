{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBar.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","mail","className","src","alt","width","height","CardList","robots","map","robot","username","email","key","SearchBar","searchfield","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","ErrorBoundry","props","state","hasError","error","info","console","log","this","setState","Component","App","onSearchChange","event","search","target","value","fetch","then","response","json","users","filtered","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2SAeeA,G,MAZF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACxB,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAG,+BAA0BJ,GAAMK,IAAI,WAAWC,MAAM,MAAMC,OAAO,QAC1E,6BACE,4BAAKN,GACL,2BAAIC,OCWGM,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,kBAAC,WAAD,KAEIA,EAAOC,KAAI,SAAAC,GAAK,OACd,kBAAC,EAAD,CACEX,GAAIW,EAAMX,GACVC,KAAMU,EAAMC,SACZV,KAAMS,EAAME,MACZC,IAAKH,EAAMX,UCIRe,G,MAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,kBAAC,WAAD,KACE,2BACEd,UAAU,SACVe,KAAK,SACLC,YAAY,wBACZC,SAAUH,OCAHI,EARA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUjB,OAAQ,WACxCe,ICqBQG,E,kDAvBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,QAAQC,IAAIH,EAAOC,GACnBG,KAAKC,SAAS,CAAEN,UAAU,M,+BAK1B,OADqBK,KAAKN,MAAlBC,SAEC,+DAEAK,KAAKP,MAAMJ,a,GAlBGa,aC4CZC,G,wDAtCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,OAAQD,EAAME,OAAOC,SAbrC,EAAKd,MAAQ,CACXY,OAAQ,GACR9B,OAAQ,IAJE,E,gEAQO,IAAD,OAClBiC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEzB,OAAQqC,S,+BAOjC,IAAD,EACoBb,KAAKN,MAAxBlB,EADD,EACCA,OAAQ8B,EADT,EACSA,OACVQ,EAAWtC,EAAOuC,QAAO,SAAArC,GAAK,OAAIA,EAAMC,SAASqC,cAAcC,SAASX,EAAOU,kBACrF,OAAQxC,EAAO0C,OAIX,yBAAKhD,UAAU,OACb,2CACA,kBAAC,EAAD,CAAWc,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,OAAQsC,OAR1B,mD,GAvBYZ,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLE,QAAQF,MAAMA,EAAMuC,c","file":"static/js/main.7dea0ecb.chunk.js","sourcesContent":["import React from 'react';\nimport '../Styles/card.css';\n\nconst Card = ({ id, name, mail }) => {\n  return (\n    <div className=\"card\">\n      <img src={`https://robohash.org/${id}`} alt=\" a robot\" width=\"200\" height=\"200\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{mail}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <Fragment>\n      {\n        robots.map(robot =>\n          <Card\n            id={robot.id}\n            name={robot.username}\n            mail={robot.email}\n            key={robot.id}\n          />\n        )\n      }\n    </Fragment>\n  );\n}\n\nexport default CardList;","import React, { Fragment } from 'react';\nimport '../Styles/searchbar.css';\n\nconst SearchBar = ({ searchfield, searchChange }) => {\n  return (\n    <Fragment>\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder=\"search for robots boi\"\n        onChange={searchChange}\n      />\n    </Fragment>\n  );\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst Scroll = ({ children }) => {\n  return (\n    <div style={{ overflowY: 'scroll', height: \"74.5vh\" }}>\n      {children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    }\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error, info);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    const { hasError } = this.state;\n    if (hasError) {\n      return <h2>Error M8, something went wrong!</h2>\n    } else {\n      return this.props.children;\n    }\n  }\n\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBar from '../components/SearchBar';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport '../Styles/app.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      search: \"\",\n      robots: [],\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ search: event.target.value });\n  }\n\n  render() {\n    const { robots, search } = this.state;\n    const filtered = robots.filter(robot => robot.username.toLowerCase().includes(search.toLowerCase()))\n    return !robots.length ?\n      <h1>Loading my bois</h1>\n      :\n      (\n        <div className=\"app\" >\n          <h1>Robot Users</h1>\n          <SearchBar searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filtered} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}